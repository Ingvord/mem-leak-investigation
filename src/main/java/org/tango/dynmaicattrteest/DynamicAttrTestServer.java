/*----- PROTECTED REGION ID(DynmaicAttrTEest.java) ENABLED START -----*/
//=============================================================================
//
// file :        DynmaicAttrTEest.java
//
// description : Java source for the DynmaicAttrTEest class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               DynmaicAttrTEest are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.java

package org.tango.dynmaicattrteest;

/*----- PROTECTED REGION ID(DynmaicAttrTEest.imports) ENABLED START -----*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.AroundInvoke;
import org.tango.server.annotation.Attribute;
import org.tango.server.annotation.Delete;
import org.tango.server.annotation.Device;
import org.tango.server.annotation.DynamicManagement;
import org.tango.server.annotation.Init;
import org.tango.server.annotation.State;
import org.tango.server.attribute.AttributeValue;
import org.tango.server.annotation.Status;
import org.tango.server.annotation.DeviceManagement;
//import org.tango.server.annotation.Pipe;
//import org.tango.server.attribute.ForwardedAttribute;
//import org.tango.server.pipe.PipeValue;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.device.DeviceManager;

//	Import Tango IDL types
import fr.esrf.Tango.*;
//import fr.esrf.TangoApi.PipeBlob;
//import fr.esrf.TangoApi.PipeDataElement;

/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.imports

/**
 *  DynmaicAttrTEest class description:
 *    
 */

@Device
public class DynamicAttrTestServer {

	protected static final Logger logger = LoggerFactory.getLogger(DynamicAttrTestServer.class);
	protected static final XLogger xlogger = XLoggerFactory.getXLogger(DynamicAttrTestServer.class);
	//========================================================
	//	Programmer's data members
	//========================================================
    /*----- PROTECTED REGION ID(DynmaicAttrTEest.variables) ENABLED START -----*/
    
    //	Put static variables here
    
    /*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.variables
	/*----- PROTECTED REGION ID(DynmaicAttrTEest.private) ENABLED START -----*/
	
	//	Put private variables here
	public DynamicAttrTest newAttr;
	/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.private

	//========================================================
	//	Property data members and related methods
	//========================================================


	//========================================================
	//	Miscellaneous methods
	//========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public void initDevice() throws DevFailed {
		xlogger.entry();
		System.out.println("init device " + deviceManager.getName());
		try{
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.initDevice) ENABLED START -----*/
		
		//	Put your device initialization code here
		Thread cr = new Thread(new CreateDynamicAttrs(dynamicManager));
		cr.start();
		newAttr = new DynamicAttrTest("Test");
		dynamicManager.addAttribute(newAttr);
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.initDevice

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		System.out.println("Out Init");
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed if something fails during the device object delation.
	 */
	@Delete
	public void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.deleteDevice) ENABLED START -----*/
		
		//	Put your device clearing code here
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * @param ctx the invocation context
	 * @throws DevFailed if something fails during this method execution.
	 */
	@AroundInvoke
	public void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry();
			/*----- PROTECTED REGION ID(DynmaicAttrTEest.aroundInvoke) ENABLED START -----*/
			
			//	Put aroundInvoke code here
			/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.aroundInvoke
		xlogger.exit();
	}

	
	/**
	 * dynamic command and attribute management. Will be injected by the framework.
	 */
	@DynamicManagement
	public DynamicManager dynamicManager;
	/**
	 * @param dynamicManager the DynamicManager instance 
	 * @throws DevFailed if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager) throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.setDynamicManager) ENABLED START -----*/
		
		//	Put your code here
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.setDynamicManager
	}
	
	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;
	public void setDeviceManager(DeviceManager deviceManager){
		this.deviceManager= deviceManager ;
	}


	//========================================================
	//	Attribute data members and related methods
	//========================================================
	/**
	 * Attribute ABC, double, Scalar, READ_WRITE
	 * description:
	 *     
	 */
	@Attribute(name="ABC")
	private double aBC;
	/**
	 * Read attribute ABC
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getABC() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.getABC) ENABLED START -----*/
		
		//	Put read attribute code here
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.getABC
		attributeValue.setValue(aBC);
		xlogger.exit();
		return attributeValue;
	}
	/**
	 * Write attribute ABC
	 * @param  aBC value to write
	 * @throws DevFailed if write attribute failed.
	 */
	public void setABC(double aBC) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.setABC) ENABLED START -----*/
		this.aBC = aBC;
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.setABC
		xlogger.exit();
	}
	
	/**
	 * Attribute DEF, double, Scalar, READ_WRITE
	 * description:
	 *     
	 */
	@Attribute(name="DEF")
	private double dEF;
	/**
	 * Read attribute DEF
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getDEF() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.getDEF) ENABLED START -----*/
		
		//	Put read attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.getDEF
		attributeValue.setValue(dEF);
		xlogger.exit();
		return attributeValue;
	}
	/**
	 * Write attribute DEF
	 * @param  dEF value to write
	 * @throws DevFailed if write attribute failed.
	 */
	public void setDEF(double dEF) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.setDEF) ENABLED START -----*/
		this.dEF = dEF;
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.setDEF
		xlogger.exit();
	}
	
	/**
	 * Attribute Equals, double, Scalar, READ
	 * description:
	 *     
	 */
	@Attribute(name="Equals")
	private double equals;
	/**
	 * Read attribute Equals
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getEquals() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.getEquals) ENABLED START -----*/
		
		//	Put read attribute code here
		AttributeValue attributeValueNew = new AttributeValue("NOT OK");
		attributeValue.setQuality(AttrQuality.ATTR_VALID);
		newAttr.setValue(attributeValueNew);
		equals = this.aBC+this.dEF;
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.getEquals
		attributeValue.setValue(equals);
		xlogger.exit();
		return attributeValue;
	}
	


	//========================================================
	//	Command data members and related methods
	//========================================================
	/**
	 * The state of the device
	*/
	@State
	private DevState state = DevState.UNKNOWN;
	/**
	 * Execute command "State".
	 * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
	 * @return Device state
	 * @throws DevFailed if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.getState) ENABLED START -----*/
		
		//	Put state code here
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.getState
		return state;
	}
	/**
	 * Set the device state
	 * @param state the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}
	
	/**
	 * The status of the device
	 */
	@Status
	private String status = "Server is starting. The device state is unknown";
	/**
	 * Execute command "Status".
	 * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
	 * @return Device status
	 * @throws DevFailed if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.getStatus) ENABLED START -----*/
		
		//	Put status code here
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.getStatus
		return status;
	}
	/**
	 * Set the device status
	 * @param status the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}
	

	//========================================================
	//	Programmer's methods
	//========================================================
	/*----- PROTECTED REGION ID(DynmaicAttrTEest.methods) ENABLED START -----*/
	
	//	Put your own methods here
	
	/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.methods


	
	
	
	
	/**
	 * Starts the server.
	 * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		System.out.println("Main started");
		/*----- PROTECTED REGION ID(DynmaicAttrTEest.main) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	DynmaicAttrTEest.main
		System.out.println("Code reached before ServerManager");
		ServerManager.getInstance().start(args, DynamicAttrTestServer.class);
		System.out.println("------- Started -------------");
	}
}
